package Tower;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

import Tower.Cell.CellType;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Enemy.java
//  @ Date : 2014.03.20.
//  @ Author : 
//
//




/**
 * Az ellensegek absztrakt ososztalya.
 */
public abstract class Enemy
{
	/**
	 * Eletero.
	 */
	private int healthPoint;
	/**
	 * Az ellenseg ennyi idonkent tud lepni.
	 */
	private int actualSpeed;
	/**
	 * Az ellenseg lassitas nelkul ennyi idonkent tud lepni.
	 */
	private int originalSpeed;
	/**
	 * Az ellenseg halalakor szarumanhoz kerulo varazsero.
	 */
	private int magic;
	/**
	 * Az ellenseg eletben van-e.
	 */
	private boolean isDead;
	/**
	 * Az az idopont amikor az ellenseg legutoljara lepett.
	 */
	private long lastTime;
	/**
	 * Az egyes ellenseg tipusok sebessegei.
	 */
	public static HashMap<String, Integer> enemySpeeds;
	/**
	 * Az ellenseg pozicioja.
	 */
	private Cell position;

	/**
	 * Konstruktor.
	 * @param hp  eletero.
	 * @param as  Az aktualis sebesseg.
	 * @param os  Az eredeti, lassitas nelkuli sebesseg.
	 * @param m  Az ellenseg halalakor szarumanhoz kerulo varazsero.
	 * @param lt  Az az idopont amikor az ellenseg legutoljara lepett.
	 */
	public Enemy(int hp, int as, int os, int m, long lt)
	{
		this.healthPoint = hp;
		this.actualSpeed = as;
		this.originalSpeed = os;
		this.magic = m;
		this.isDead = false;
		this.lastTime = lt;
		this.enemySpeeds = new HashMap<String,Integer>();
	}

	/**
	 * Getter a healthPoint attributumra.
	 * @return  A healthPoint attributum.
	 */
	public int getHealthPoint()
	{
		return this.healthPoint;
	}

	/**
	 * Getter az actualSpeed attributumra.
	 * @return  Az actualSpeed attributum.
	 */
	public int getActualSpeed()
	{
		String logString = "Enemy.getActualSpeed()";
		Logger.Log(1, logString, this);

		Logger.Log(0, logString, this);

		return this.actualSpeed;
	}

	/**
	 * Getter az originalSpeed attributumra.
	 * @return  Az originalSpeed attributum.
	 */
	public int getOriginalSpeed()
	{
		String logString = "Enemy.getOriginalSpeed()";
		Logger.Log(1, logString, this);

		Logger.Log(0, logString, this);

		return this.originalSpeed;
	}

	/**
	 * Getter a magic attributumra.
	 * @return  A magic attributum.
	 */
	public int getMagic()
	{
		return this.magic;
	}
	
	/**
	 * Getter a lastTime attributumra.
	 * @return  A lastTime attributum.
	 */
	public long getLastTime()
	{
		return this.lastTime;
	}
	
	/**
	 * Getter az isDead attributumra.
	 * @return  Az isDead attributum.
	 */
	public boolean getIsDead()
	{
		return this.isDead;
	}
	
	/**
	 * Getter a position attributumra.
	 * @return  A position attributum.
	 */
	public Cell getPosition()
	{
		String logString = "Enemy.getPosition()";
		Logger.Log(1, logString, this);

		Logger.Log(0, logString, this);

		return this.position;
	}

	/**
	 * Setter a healthPoint attributumra.
	 * @param hp  A healthPoint attributum kivant erteke.
	 */
	public void setHealthPoint(int hp)
	{
		this.healthPoint = hp;
	}

	/**
	 * Setter az actualSpeed attributumra.
	 * @param as  Az actualSpeed attributum kivant erteke.
	 */
	public void setActualSpeed(int as)
	{
		String logString = "Enemy.setActualSpeed(as)";
		Logger.Log(1, logString, this);

		this.actualSpeed = as;

		Logger.Log(0, logString, this);
	}

	/**
	 * Setter az originalSpeed attributumra.
	 * @param os  Az originalSpeed attributum kivant erteke.
	 */
	public void setOriginalSpeed(int os)
	{
		this.originalSpeed = os;
	}

	/**
	 * Setter a magic attributumra.
	 * @param m  A magic attributum kivant erteke.
	 */
	public void setMagic(int m)
	{
		this.magic = m;
	}

	/**
	 * Setter a lastTime attributumra.
	 * @param lt  A lastTime attributum kivant erteke.
	 */
	public void setLastTime(long lt)
	{
		this.lastTime = lt;
	}

	/**
	 * Setter az isDead attributumra.
	 * @param dead  Az isDead attributum kivant erteke.
	 */
	public void setIsDead(boolean dead)
	{
		this.isDead = dead;
	}

	/**
	 * Setter a position attributumra.
	 * @param pos  A position attributum kivant erteke.
	 */
	public void setPosition(Cell pos)
	{
		String logString = "Enemy.setPosition(position)";
		Logger.Log(1, logString, this);

		this.position = pos;

		Logger.Log(0, logString, this);
	}

	/**
	 * Atlepteti az ellenseget egy olyan veletlenszeruen kivalasztott
	 *  szomszedos cellara, amelyik ut vagy vegpont es a hozza tartozo
	 *  boolean ertek igaz.
	 * Az uj cellatol elkeri a rajta talalhato akadalyt es ha kell
	 *  akkor lassitja az ellenseget, vagy visszaallitja a sebesseget az
	 *  eredetire.
	 * @return Az uj cellatol elkert akadaly objektum. 
	 *  Ha nincs akadaly az uj cellan, akkor null-t ad vissza.
	 */
	private Obstacle moveToNextCell() {
		ArrayList<Cell> nextCells = new ArrayList<Cell>();
		// Vegigiteralunk a szomszedos cellakon
		for(Entry<Cell, Boolean> neighbour : position.getNeighbours().values()) {
			Cell cell = neighbour.getKey();
			boolean bool = neighbour.getValue();
			// Csak azokat mentjuk el a listankba, amelyek ut vagy vegpont tipusuak
			// es igaz a hozzajuk tartozo bool valtozo
			if ((cell.getCellType() == CellType.Road || cell.getCellType() == CellType.EndPoint)
					&& bool) {
				nextCells.add(cell);
			}
		}
		
		// Csak akkor lepunk, ha van jo szomszedos cella
		if (!nextCells.isEmpty()) {
			// A szomszedos cellak kozul kivalasztunk egy veletlen elemet
			// es beallitjuk a pozicionkat
			int random = (int)(Math.random() * nextCells.size());
			position = nextCells.get(random);
			
			// Visszallitjuk a sebesseget az eredetire ha kell
			if (actualSpeed != originalSpeed) {
				actualSpeed = originalSpeed;
			}
		}
		
		// Elkerjuk az uj cellan levo akadalyt, es ha van akadaly akkor lassitunk
		Obstacle obstacle = position.getObstacle();
		if (obstacle != null) {
			actualSpeed *= obstacle.getSlowRate();
		}
		
		return obstacle;
	}
	
	/**
	 * Az ellenseg eleterejet a parameterkent kapott power-rel,
	 *  es a bonus kollekcioban tarolt az ellenseg konkret tipusahoz
	 *  tartozo ertekkel csokkenti.
	 * Ha az elet 0 ala csokken, akkor beallitja az isDead valtozo erteket true-ra.
	 * @param power  A sebzes erteke.
	 * @param bonus  Az egyes ellenseg tipusokhoz tartozo bonusz sebzesek.
	 * @return Az ellenseg belehalt-e a sebzesbe.
	 */
	public abstract boolean damage(int power, HashMap<String, Integer> bonus);

	/**
	 * Ertesiti az ellenfelet az ido mulasarol.
	 */
	public void tick()
	{
		long current = System.currentTimeMillis();
		// Ha eltelt a legutobbi mozgás ota a megfelelo ido akkor mozgatunk.
		if (current - lastTime >= actualSpeed) {
			move();
			lastTime = current;
		}
	}

	/**
	 * Az ellenseget mozgatja. 
	 * Ezen a szinten egy tisztan virtualis fuggveny.
	 */
	public abstract void move();
}
