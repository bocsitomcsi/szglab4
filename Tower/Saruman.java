package Tower;

import java.util.Scanner;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Saruman.java
//  @ Date : 2014.03.20.
//  @ Author : 
//
//




/**
 * Szarumán.
 */
public class Saruman
{
	/**
	 * A rendelkezésre álló varázserõ.
	 */
	private int magicPower;
	/**
	 * Egy torony lerakásának költsége.
	 */
	private int towerCost;
	/**
	 * Egy akadály lerakásának költsége.
	 */
	private int obstacleCost;
	/**
	 * Egy varázskõ használatának költsége.
	 */
	private int magicStoneCost;
	/**
	 * A kiválasztott varázskõ.
	 */
	private MagicStone selectedMagicStone;
	/**
	 * A pálya.
	 */
	private Map map;

	/**
	 * Konstruktor.
	 * @param mp  A rendelkezésre álló varázserõ.
	 * @param tc  Egy torony lerakásának költsége.
	 * @param oc  Egy akadály lerakásának költsége.
	 * @param mc  Egy varázskõ használatának költsége.
	 * @param map  A pálya.
	 */
	public Saruman(int mp, int tc, int oc, int mc, Map map)
	{
		this.magicPower = mp;
		this.towerCost = tc;
		this.obstacleCost = oc;
		this.magicStoneCost = mc;
		this.map = map;
	}

/**
	 * Getter a magicPower attribútumra.
	 * @return  A magicPower attribútum.
	 */
	public int getMagicPower()
	{
		return this.magicPower;
	}

	/**
	 * Getter a towerCost attribútumra.
	 * @return  A towerCost attribútum.
	 */
	public int getTowerCost()
	{
		return this.towerCost;
	}

	/**
	 * Getter az obstacleCost attribútumra.
	 * @return  Az obstacleCost attribútum.
	 */
	public int getObstacleCost()
	{
		return this.obstacleCost;
	}

	/**
	 * Getter a magicStoneCost attribútumra.
	 * @return  A magicStoneCost attribútum.
	 */
	public int getMagicStoneCost()
	{
		return this.magicStoneCost;
	}
	
	/**
	 * Getter a selectedMagicStone attribútumra.
	 * @return  A selectedMagicStone attribútum.
	 */
	public MagicStone getSelectedMagicStone() {
		return this.selectedMagicStone;
	}

	/**
	 * Setter a magicPower attribútumra.
	 * @param b  A magicPower attribútum kívánt értéke.
	 */
	public void setMagicPower(int mp)
	{
		String logString = "Saruman.setMagicPower(mp)";
		Logger.Log(1, logString, this);

		this.magicPower = mp;

		Logger.Log(0, logString, this);
	}

	/**
	 * Setter a towerCost attribútumra.
	 * @param b  A towerCost attribútum kívánt értéke.
	 */
	public void setTowerCost(int tc)
	{
		this.towerCost = tc;
	}

	/**
	 * Setter az obstacleCost attribútumra.
	 * @param b  Az obstacleCost attribútum kívánt értéke.
	 */
	public void setObstacleCost(int sc)
	{
		this.obstacleCost = sc;
	}

	/**
	 * Setter a magicStoneCost attribútumra.
	 * @param b  A magicStoneCost attribútum kívánt értéke.
	 */
	public void setMagicStoneCost(int mc)
	{
		this.magicStoneCost = mc;
	}

	/**
	 * A megadott típusú varázskõ létrehozása. 
	 * A létrehozott varázskövet a selectedMagicStone attribútumba tárolja el. 
	 * Ha nincs elég varázserõ a kõ létrehozásához, akkor hamis értékkel 
	 *  tér vissza, és nem hozza létre a követ. 
	 * Ellenkezõ esetben igaz értékkel tér vissza.
	 * @param type  A varázskõ típusa.
	 * @return A varázskõ létrehozásának sikeressége.
	 */
	public boolean createStone(String type)
	{
		String logString = "Saruman.createStone(type)";
		Logger.Log(1, logString, this);

		MagicStone stone;

		if(type.equals("purple")) {
			stone = new PurpleMagicStone("purple", 1, 1, 1, 1);
			Logger.AddName(stone, "PurpleStoneID");
		} else if(type.equals("cyan")) {
			stone = new CyanMagicStone("cyan", 1, 1, 1, 1);
			Logger.AddName(stone, "CyanStoneID");
		} else { //it's green
			stone = new GreenMagicStone("green", 1, 1, 1, 1);
			Logger.AddName(stone, "GreenStoneID");
		}
		this.selectedMagicStone = stone;
		Logger.Log(0, logString, this);

		return true;
	}

	/**
	 * Hozzáad egy tornyot a paraméterként kapott cellához. 
	 * Ehhez létrehoz egy új tornyot, és azt hozzáfûzi a map towers listájához. 
	 * Ha nincs elég varázserõ a torony létrehozásához, vagy 
	 *  a megadott cella már foglalt vagy út, akkor hamis értékkel 
	 *  tér vissza, és nem hozza létre a tornyot. 
	 * Ellenkezõ esetben igaz értékkel tér vissza. 
	 * A varázserõt (magicPower) a hozzáadás sikerességétõl függõen csökkenti.
	 * @param pos  A torony pozíciója.
	 * @return A torony lerakásának sikeressége.
	 */
	public boolean addTower(Cell pos)
	{
		String logString = "Saruman.addTower(pos)";
		Logger.Log(1, logString, this);
		String answerText;
		Tower tower;
		boolean isUsable;
		Scanner scanner = new Scanner (System.in);

		while(true) {
			System.out.print("Lehet elhelyezni a cellara tornyot [igen, nem]: ");
			answerText = scanner.next();
			if(answerText.equals("igen")) {
				isUsable=true;
				break;
			} else if(answerText.equals("nem")) {
				isUsable=false;
				break;
			} else {
				System.out.println("Helytelen ertek");
				continue;
			}
		}

		if(isUsable) {
			tower = new Tower(1, 1, 1, 1, 1, pos, map);
			map.addTower(tower);
			this.changeMagicPowerBy(-1);
			Logger.Log(0, logString, this);

			return true;
		}
		Logger.Log(0, logString, this);

		return false;
	}

	/**
	 * Hozzáad egy akadályt  a paraméterként kapott cellához. 
	 * Ehhez létrehoz egy új akadályt, és azt hozzáfûzi az obstacles listához. 
	 * Ha nincs elég varázserõ az akadály létrehozásához, vagy 
	 *  a megadott cella nem egy darab út, akkor hamis értékkel tér vissza, 
	 *  és nem hozza létre az akadályt. 
	 * Ellenkezõ esetben igaz értékkel tér vissza. 
	 * A varázserõt (magicPower) a hozzáadás sikerességétõl függõen csökkenti.
	 * @param pos  Az akadály pozíciója.
	 * @return Az akadály lerakásának sikeressége.
	 */
	public boolean addObstacle(Cell pos)
	{
		String logString = "Saruman.addObstacle(pos)";
		Logger.Log(1, logString, this);

		Obstacle obstacle;
		boolean isUsable;
		String answerText;
		Scanner scanner = new Scanner (System.in);

		while(true) {
			System.out.print("Lehet elhelyezni a cellara akadalyt [igen, nem]: ");
			answerText = scanner.next();
			if(answerText.equals("igen")) {
				isUsable=true;
				break;
			} else if(answerText.equals("nem")) {
				isUsable=false;
				break;
			} else {
				System.out.println("Helytelen ertek");
				continue;
			}
		}

		if(isUsable) {
			obstacle = new Obstacle(1, 1, pos);
			map.addObstacle(obstacle);
			this.changeMagicPowerBy(-1);
			Logger.Log(0, logString, this);

			return true;
		}
		Logger.Log(0, logString, this);

		return false;
	}

	/**
	 * Meghívja az item-nek az upgrade függvényét átadva a kiválasztott varázskövet. 
	 * Ha az upgrade igaz értékkel tér vissza, akkor a fejlesztés sikeres volt 
	 *  és a selectedMagicStone referenciát null-ra állítja.
	 * @param item  A fejlesztendõ objektum.
	 * @return A fejlesztés sikeressége.
	 */
	public boolean upgradeItem(Item item)
	{
		String logString = "Saruman.upgradeItem(item)";
		Logger.Log(1, logString, this);
		
		item.upgrade(this.selectedMagicStone);
		
		Logger.Log(0, logString, this);
		return true;
	}

	/**
	 * A kapott értéket hozzáadja a magicPower attribútumhoz.
	 * @param power  A varázserõhöz hozzáadandó érték.
	 */
	public void changeMagicPowerBy(int power)
	{
		String logString = "Saruman.changeMagicPowerBy(power)";
		Logger.Log(1, logString, this);

		this.setMagicPower(4);

		Logger.Log(0, logString, this);
	}
}
